"""
### csbp.jl

Computes the 1D classical finite difference SBP operator
The number of nodes is the "minimum" ie. boundary stencils plus 1 interior node
**Inputs**
* `p`: degree of the operator 

**Outputs** 
* `D`: SBP differentiation matrix
* `Q`: SBP Q matrix
* 'H': SBP norm/quadrature matrix
* 'x': nodal distribution of points between -1 and 1
"""

function get_1d_csbp(p)
    L = 2 
    if p == 1
        N = 5
        dx = L / (N - 1)
        x = collect(range(-1, 1, length=N))
    
        Pinv = [2; ones(N - 2); 2] ./ dx
    
        Q = zeros(N, N)
        for i in 1:N-1
            Q[i, i+1] +=  0.5
            Q[i+1, i] += -0.5
        end
        Q[1, 1] = -0.5
        Q[N, N] = 0.5
        H = zeros(N, N)
        for i in 1:N
            H[i, i] = 1 / Pinv[i]
        end
        H *= 2*dx # to get scaling between -1 and 1 
    elseif p == 2
        N = 9
        dx = L / (N - 1)
        x = collect(range(-1, 1, length=N))
        Pinv = vcat(
            48/17, 48/59, 48/43, 48/49,
            ones(N - 8),
            48/49, 48/43, 48/59, 48/17
        ) ./ dx
        H = zeros(N, N)
        for i in 1:N
            H[i, i] = 1 / Pinv[i]
        end
        H *=2
        Q = zeros(N, N)
        for i in 3:N-2
            Q[i, i-2] =  1/12
            Q[i, i-1] = -2/3
            Q[i, i+1] =  2/3
            Q[i, i+2] = -1/12
        end
        Q[1,2] = 59/96
        Q[1,3] = -1/12
        Q[1,4] = -1/32
        Q[2,1] = -59/96
        Q[2,3] = 59/96
        Q[2,4] = 0
        Q[3,1] = 1/12
        Q[3,2] = -59/96
        Q[3,4] = 59/96
        Q[4,1] = 1/32
        Q[4,2] = 0
        Q[4,3] = -59/96
        for i in 1:3
            for j in (i+1):4
                Q[N-j+1,N-i+1] = Q[i, j]
            end
        end  
        # Make skew-symmetric
        for i in 1:N
            for j in 1:(i-1)
                Q[i,j] = -Q[j,i]
            end
        end  

        Q[1, 1] = -0.5
        Q[N, N] = 0.5

    elseif p == 3
        N = 13
        dx = L / (N - 1)
        x = collect(range(-1, 1, length=N))

        Pinv=vcat(43200/13649, 8640/12013, 4320/2711, 4320/5359, 8640/7877, 43200/43801,
        ones(1,N-12),
        43200/43801, 8640/7877, 4320/5359, 4320/2711, 8640/12013, 43200/13649) / dx;
        H = zeros(N, N)
        for i in 1:N
            H[i, i] = 1 / Pinv[i]
        end
        H *=2
        Q = zeros(N, N)
        for i in 4:N-3
            Q[i, i-3] = -1/60
            Q[i, i-2] = 3/20
            Q[i, i-1] = -3/4
            Q[i, i+1] = 3/4
            Q[i, i+2] = -3/20
            Q[i, i+3] = 1/60
        end           
        Q[1,2] =  104009/172800
        Q[1,3] =  30443/259200
        Q[1,4] = -33311/86400
        Q[1,5] =  16863/86400
        Q[1,6] = -15025/518400;
        Q[2,1] = -104009/172800
        Q[2,3] = -311/51840
        Q[2,4] =  20229/17280
        Q[2,5] = -24337/34560
        Q[2,6] =  36661/259200
        Q[3,1] = -30443/259200
        Q[3,2] =  311/51840
        Q[3,4] = -11155/25920
        Q[3,5] =  41287/51840
        Q[3,6] = -21999/86400  
        Q[4,1] =  33311/86400
        Q[4,2] = -20229/17280
        Q[4,3] =  11155/25920
        Q[4,5] =  4147/17280
        Q[4,6] =  25427/259200
        Q[5,1] = -16863/86400
        Q[5,2] =  24337/34560
        Q[5,3] = -41287/51840
        Q[5,4] = -4147/17280
        Q[5,6] =  342523/518400
        Q[6,1] =  15025/518400
        Q[6,2] = -36661/259200
        Q[6,3] =  21999/86400
        Q[6,4] = -25427/259200
        Q[6,5] = -342523/518400
        for i in 1:5
            for j in (i+1):6
                Q[N-j+1,N-i+1] = Q[i, j]
            end
        end  
        # Make skew-symmetric
        for i in 1:N
            for j in 1:(i-1)
                Q[i,j] = -Q[j,i]
            end
        end  
        Q[1, 1] = -0.5
        Q[N, N] = 0.5

    elseif p == 4
        N = 17
        dx = L / (N - 1)
        x = collect(range(-1, 1, length=N))
        Pinv=vcat(1498139/5080320, 1107307/725760, 20761/80640, 1304999/725760, 299527/725760, 103097/80640, 670091/725760, 5127739/5080320,
        ones(1,N-16),
        5127739/5080320, 670091/725760, 103097/80640, 299527/725760, 1304999/725760, 20761/80640, 1107307/725760, 1498139/5080320) / dx;
        H = zeros(N, N)
        for i in 1:N
            H[i, i] = 1 / Pinv[i]
        end
        r67=0.69789473684211;  
        r68=-0.12052631578947;   
        r78=0.75868421052632;
        D = zeros(N,N)
        for i in 5:N-4
            D[i, i-4] = 1/280
            D[i, i-3] = -4/105
            D[i, i-2] = 1/5
            D[i, i-1] = -4/5
            D[i, i+1] = 4/5
            D[i, i+2] = -1/5
            D[i, i+3] = 4/105
            D[i, i+4] = -1/280
        end
        D[1:8,1:12]=[-2540160/1498139 -142642467/5992556+50803200/1498139*r78+5080320/1498139*r67+25401600/1498139*r68 705710031/5992556-228614400/1498139*r78-25401600/1498139*r67-121927680/1498139*r68 -3577778591/17977668+381024000/1498139*r78+50803200/1498139*r67+228614400/1498139*r68 203718909/1498139-254016000/1498139*r78-50803200/1498139*r67-203212800/1498139*r68 -32111205/5992556+25401600/1498139*r67+76204800/1498139*r68 -652789417/17977668+76204800/1498139*r78-5080320/1498139*r67 74517981/5992556-25401600/1498139*r78-5080320/1498139*r68 0 0 0 0;142642467/31004596-7257600/1107307*r78-725760/1107307*r67-3628800/1107307*r68 0 -141502371/2214614+91445760/1107307*r78+10886400/1107307*r67+50803200/1107307*r68 159673719/1107307-203212800/1107307*r78-29030400/1107307*r67-127008000/1107307*r68 -1477714693/13287684+152409600/1107307*r78+32659200/1107307*r67+127008000/1107307*r68 11652351/2214614-17418240/1107307*r67-50803200/1107307*r68 36069450/1107307-50803200/1107307*r78+3628800/1107307*r67 -536324953/46506894+17418240/1107307*r78+3628800/1107307*r68 0 0 0 0;-18095129/134148+3628800/20761*r78+403200/20761*r67+1935360/20761*r68 47167457/124566-10160640/20761*r78-1209600/20761*r67-5644800/20761*r68 0 -120219461/124566+25401600/20761*r78+4032000/20761*r67+16934400/20761*r68 249289259/249132-25401600/20761*r78-6048000/20761*r67-22579200/20761*r68 -2611503/41522+3628800/20761*r67+10160640/20761*r68 -7149666/20761+10160640/20761*r78-806400/20761*r67 37199165/290654-3628800/20761*r78-806400/20761*r68 0 0 0 0;3577778591/109619916-54432000/1304999*r78-7257600/1304999*r67-32659200/1304999*r68 -159673719/1304999+203212800/1304999*r78+29030400/1304999*r67+127008000/1304999*r68 360658383/2609998-228614400/1304999*r78-36288000/1304999*r67-152409600/1304999*r68 0 -424854441/5219996+127008000/1304999*r78+36288000/1304999*r67+127008000/1304999*r68 22885113/2609998-29030400/1304999*r67-76204800/1304999*r68 158096578/3914997-76204800/1304999*r78+7257600/1304999*r67 -296462325/18269986+29030400/1304999*r78+7257600/1304999*r68 0 0 0 0;-203718909/2096689+36288000/299527*r78+7257600/299527*r67+29030400/299527*r68 1477714693/3594324-152409600/299527*r78-32659200/299527*r67-127008000/299527*r68 -747867777/1198108+228614400/299527*r78+54432000/299527*r67+203212800/299527*r68 424854441/1198108-127008000/299527*r78-36288000/299527*r67-127008000/299527*r68 0 -17380335/1198108+10886400/299527*r67+25401600/299527*r68 -67080435/1198108+25401600/299527*r78-3628800/299527*r67 657798011/25160268-10886400/299527*r78-3628800/299527*r68 -2592/299527 0 0 0;1529105/1237164-403200/103097*r67-1209600/103097*r68 -3884117/618582+1935360/103097*r67+5644800/103097*r68 2611503/206194-3628800/103097*r67-10160640/103097*r68 -7628371/618582+3225600/103097*r67+8467200/103097*r68 5793445/1237164-1209600/103097*r67-2822400/103097*r68 0 80640/103097*r67 80640/103097*r68 3072/103097 -288/103097 0 0;93255631/8041092-10886400/670091*r78+725760/670091*r67 -36069450/670091+50803200/670091*r78-3628800/670091*r67 64346994/670091-91445760/670091*r78+7257600/670091*r67 -158096578/2010273+76204800/670091*r78-7257600/670091*r67 67080435/2680364-25401600/670091*r78+3628800/670091*r67 -725760/670091*r67 0 725760/670091*r78 -145152/670091 27648/670091 -2592/670091 0;-3921999/1079524+25401600/5127739*r78+5080320/5127739*r68 536324953/30766434-121927680/5127739*r78-25401600/5127739*r68 -334792485/10255478+228614400/5127739*r78+50803200/5127739*r68 296462325/10255478-203212800/5127739*r78-50803200/5127739*r68 -657798011/61532868+76204800/5127739*r78+25401600/5127739*r68 -5080320/5127739*r68 -5080320/5127739*r78 0 4064256/5127739 -1016064/5127739 193536/5127739 -18144/5127739]
        D[N-7:N, N-11:N] = reverse(reverse(-D[1:8, 1:12], dims=1), dims=2)
        
        D /= (dx*2)
        H *= 2
        Q = H*D

    else 
        error("p=1,2,3,or 4 only.")
    end    

    # differentiation matrix 
    D = H \ Q   
    
    return D, Q, H, x
end