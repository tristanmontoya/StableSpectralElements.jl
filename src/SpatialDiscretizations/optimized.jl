"""
### optimized.jl

Computes 1D Optimized operator of Mattson et. al. (JCP V264, pg91-111)
**Inputs**
* `p`: degree of the operator 

**Outputs** 
* `D`: SBP differentiation matrix
* `Q`: SBP Q matrix
* 'H': SBP norm/quadrature matrix
* 'x': nodal distribution of points between -1 and 1
"""

# from 2014 paper: Optimal diagonal-norm SBP operators
function get_1d_opt(p::Int)

    if p == 1
        N = 7 # 3 on each boundary + 1 interior

        d1 = 0.78866488858096586513
        d2 = 0.95915098594220826013
        d3 = 1.0

        H1_1 = 0.33743097329453577701
        H2_2 = 0.97759682018833491296
        H3_3 = 0.93278808104030343530
        h_diag = [H1_1, H2_2, H3_3]

        d = d1+d2+d3
        h = 1/(2*d+(N-7))

        x = zeros(N)
        x[2] = d1*h
        x[3] = (d1+d2)*h
        x[4] = d*h
        for i in 1:(N - 8)
            x[i+4] = (d+i)*h
        end
        x[end] = 1.0
        x[end-1] = 1-d1*h
        x[end-2] = 1-(d1+d2)*h
        x[end-3] = 1-d*h

        H = Matrix{Float64}(I, N, N)
        for i in 1:length(h_diag)
            H[i, i] = h_diag[i]
            H[N + 1 - i, N + 1 - i] = h_diag[i]
        end
        H *= 2*h # note the factor of 2 is to define the operator between -1 and 1 since the original operators are defined between 0 and 1

        Q = zeros(N, N)
        for i in 2:N-1
            Q[i, i-1] = -0.5
            Q[i, i+1] = 0.5
        end

        Q[1,2] = 0.55932483188770411252
        Q[1,3] = -0.05932483188770411252
        Q[2,3] = 0.55932483188770411252
        for i in 1:2
            for j in (i+1):3
                Q[N-j+1,N-i+1] = Q[i, j]
            end
        end

        for i in 1:N
            for j in 1:(i - 1)
                Q[i, j] = -Q[j, i]
            end
        end

        Q[1, 1] = -0.5
        Q[N, N] = 0.5
    
    elseif p == 2
        N = 11 # 5 on each boundary + 1 interior

        d1 = 0.72181367003646814327
        d2 = 1.3409118421582217252
        d3 = 1.2898797485951900258
        
        H1_1 = 0.21427296612044126417
        H2_2 = 1.123759588488739348
        H3_3 = 1.434458792494126
        H4_4 = 1.0917323021736130836
        H5_5 = 0.9883816115129601975      
        h_diag = [H1_1 H2_2 H3_3 H4_4 H5_5]

        d = d1+d2+d3
        h = 1/(2*d+(N-7))
    
        x = zeros(N)
        x[2] = d1*h
        x[3] = (d1+d2)*h
        x[4] = d*h
        for i = 1:N-8
            x[i+4] = (d+i)*h
        end
        x[end] = 1
        x[end-1] = 1-d1*h
        x[end-2] = 1-(d1+d2)*h
        x[end-3] = 1-d*h

        H = Matrix{Float64}(I, N, N)
        for i in 1:length(h_diag)
            H[i, i] = h_diag[i]
            H[N + 1 - i, N + 1 - i] = h_diag[i]
        end
        H *= 2*h # note the factor of 2 is to define the operator between -1 and 1 since the original operators are defined between 0 and 1

        Q = zeros(N, N)
        for i in 3:N-2
            Q[i, i-2] = 1/12
            Q[i, i-1] = -2/3
            Q[i, i+1] = 2/3
            Q[i, i+2] = -1/12
        end           
        Q[1,2] = 0.66884898686930380508
        Q[1,3] = -0.25171531878753856238
        Q[1,4] = 0.10997619816825822803
        Q[1,5] = -0.027109866250023470592
        Q[2,3] = 0.92214436948640491071
        Q[2,4] = -0.32412368653542520402
        Q[2,5] = 0.070828303918324098284
        Q[3,4] = 0.8180378089216779335
        Q[3,5] = -0.14760875822281158529
        Q[4,5] = 0.68722365388784429092
        
        for i in 1:4
            for j in (i+1):5
                Q[N-j+1,N-i+1] = Q[i, j]
            end
        end  

        # Make skew-symmetric
        for i in 1:N
            for j in 1:(i-1)
                Q[i,j] = -Q[j,i]
            end
        end  
    
        Q[1, 1] = -0.5
        Q[N, N] = 0.5
    elseif p == 3
        N = 15 # 7 on each boundary + 1 interior
        d1 = 0.51670081689316731234
        d2 = 0.98190527037374634269
        d3 = 1.0868393364992957832
        
        H1_1 = 0.15109714532036117328
        H2_2 = 0.80967585357107013003
        H3_3 = 1.0911427148079254850
        H4_4 = 1.0435269041571577756
        H5_5 = 0.98680905919946100728
        H6_6 = 1.0037581831426163456
        H7_7 = 0.99943556356761752125
        h_diag = [H1_1 H2_2 H3_3 H4_4 H5_5 H6_6 H7_7]
        
        d = d1+d2+d3
        h = 1/(2*d+(N-7))
        
        x = zeros(N)
        x[2] = d1*h
        x[3] = (d1+d2)*h
        x[4] = d*h
        for i = 1:N-8
            x[i+4] = (d+i)*h
        end
        x[end] = 1
        x[end-1] = 1-d1*h
        x[end-2] = 1-(d1+d2)*h
        x[end-3] = 1-d*h    

        H = Matrix{Float64}(I, N, N)
        for i in 1:length(h_diag)
            H[i, i] = h_diag[i]
            H[N + 1 - i, N + 1 - i] = h_diag[i]
        end
        H *= 2*h # note the factor of 2 is to define the operator between -1 and 1 since the original operators are defined between 0 and 1

        Q = zeros(N, N)
        for i in 4:N-3
            Q[i, i-3] = -1/60
            Q[i, i-2] = 3/20
            Q[i, i-1] = -3/4
            Q[i, i+1] = 3/4
            Q[i, i+2] = -3/20
            Q[i, i+3] = 1/60
        end    

        Q[1,2] = 0.66670790901888837033
        Q[1,3] = -0.23418791580399147484
        Q[1,4] = 0.084251264588860596867
        Q[1,5] = -0.015923290838179674350
        Q[1,6]= -0.0015653772860347171721
        Q[1,7] = 0.00071741032045689717567
        Q[2,3] = 0.89405599296515541581
        Q[2,4] = -0.28597427787314667440
        Q[2,5] = 0.057056178538117177397
        Q[2,6] = 0.0041320613074890940489
        Q[2,7] = -0.0025620459187266476645
        Q[3,4] = 0.82961715259707113283
        Q[3,5] = -0.18233747042994439227
        Q[3,6] = 0.0083784382166533084621
        Q[3,7] = 0.0042099567773838744673
        Q[4,5] = 0.75419218459746682761
        Q[4,6] = -0.14034899831339963049
        Q[4,7] = 0.014050953028717865444
        Q[5,6] = 0.74751473989919011204
        Q[5,7] = -0.15119380469839682133
        Q[6,7] = 0.75144419715723149872

        # Mirror into bottom-right corner
        for i in 1:6
            for j in (i+1):7
                Q[N-j+1,N-i+1] = Q[i, j]
            end
        end
        # Make skew-symmetric
        for i in 1:N
            for j in 1:(i-1)
                Q[i,j] = -Q[j,i]
            end
        end  

        Q[1, 1] = -0.5
        Q[N, N] = 0.5
    elseif p ==4
        N = 17
        d1 = 0.41669687672575697416
        d2 = 0.78703773886730090312
        d3 = 0.92685925671601406028
        
        H1_1 = 0.12163222110707502878
        H2_2 = 0.65235832636546639982
        H3_3 = 0.87730414198101010954
        H4_4 = 0.97388951771079542799
        H5_5 = 1.0072514376844677230
        H6_6 = 0.99768726657776478834
        H7_7 = 1.0005302998791085514
        H8_8 = 0.99994066100338390832    
        h_diag = [H1_1 H2_2 H3_3 H4_4 H5_5 H6_6 H7_7 H8_8]
        
        d = d1+d2+d3
        h = 1/(2*d+(N-7))
        
        x = zeros(N)
        x[2] = d1*h
        x[3] = (d1+d2)*h
        x[4] = d*h
        for i = 1:N-8
            x[i+4] = (d+i)*h
        end
        x[end] = 1
        x[end-1] = 1-d1*h
        x[end-2] = 1-(d1+d2)*h
        x[end-3] = 1-d*h
        
        H = Matrix{Float64}(I, N, N)
        for i in 1:length(h_diag)
            H[i, i] = h_diag[i]
            H[N + 1 - i, N + 1 - i] = h_diag[i]
        end
        H *= 2*h # note the factor of 2 is to define the operator between -1 and 1 since the original operators are defined between 0 and 1
       
        Q = zeros(N, N)
        for i in 5:N-4
            Q[i, i-4] = 1/280
            Q[i, i-3] = -4/105
            Q[i, i-2] = 1/5
            Q[i, i-1] = -4/5
            Q[i, i+1] = 4/5
            Q[i, i+2] = -1/5
            Q[i, i+3] = 4/105
            Q[i, i+4] = -1/280
        end  
        
        Q[1,2] = 0.66670790901888837033 -0.002234099929157 # CORRECTION
        Q[1,3] = -0.21994030190635039046
        Q[1,4] = 0.061752567584332553851
        Q[1,5] = -0.0032312350944133128873
        Q[1,6] = -0.0033934980320003350186
        Q[1,7] = 0.000015157027970563223705
        Q[1,8] = 0.00032350133072942893419
        Q[2,3] = 0.86688767821045233147
        Q[2,4] = -0.24298087640343350527
        Q[2,5] = 0.039549469619698650847
        Q[2,6] = 0.0020763528371484737510
        Q[2,7] = -0.00065045489396961912976
        Q[2,8] = -0.00040836028016484152445
        Q[3,4] = 0.82065092584472835146
        Q[3,5] = -0.21014872891771196683
        Q[3,6] = 0.038572177503610408523
        Q[3,7] = -0.0016637807199883547459
        Q[3,8] = -0.00046321740653650899692
        Q[4,5] = 0.81102837324727866266
        Q[4,6] = -0.20423896795865859484
        Q[4,7] = 0.034947121761434371005
        Q[4,8] = -0.0023139100244270367378 # CORRECTION (paper forgot the negative) 
        Q[5,6] = 0.80054065093594950025
        Q[5,7] = -0.19699167992690472530
        Q[5,8] = 0.037220336417235830241
        Q[6,7] = 0.79903079313046586260
        Q[6,8] = -0.19999788736822592697
        Q[7,8] = 0.80016334685519857774
        # Mirror into bottom-right corner
        for i in 1:7
            for j in (i+1):8
                Q[N-j+1,N-i+1] = Q[i, j]
            end
        end
        # Make skew-symmetric
        for i in 1:N
            for j in 1:(i-1)
                Q[i,j] = -Q[j,i]
            end
        end

        Q[1, 1] = -0.5
        Q[N, N] = 0.5        
    else
        error("p=1,2,3, or 4 only.")
    end

    # map the nodes between -1 and 1
    for i = 1:N
        x[i] = 2*x[i]-1;
    end

    # differentiation matrix 
    D = H \ Q 

    return D, Q, H, x
end

# from 2017 paper: Boundary optimized diagonal-norm SBP operators
# operators optimized for minimum solution error
function get_1d_optimal(p::Int, L::Float64=1.0)
    if p == 2
        N = 9 # 4 boundary nodes
        BP = 4
        m = 2

        x0 = 0.0
        x1 = 6.8764546205559e-01
        x2 = 1.8022115125776e+00
        x3 = 2.8022115125776e+00
        x4 = 3.8022115125776e+00
        xb = [x0, x1, x2, x3, x4][1:m+1]

        h = L / (2*xb[end] + N - 1 - 2*m)
        xmid = LinRange(xb[end]+1, L/h - xb[end] - 1, N - 2*(m+1))
        x = h .* vcat(xb, collect(xmid), (L/h) .- reverse(xb))

        H1_1 = 2.1259737557798e-01
        H2_2 = 1.0260290400758e+00
        H3_3 = 1.0775123588954e+00
        H4_4 = 9.8607273802835e-01
        h_diag = [H1_1, H2_2, H3_3, H4_4]
        
        H = Matrix{Float64}(I, N, N)
        for i in 1:length(h_diag)
            H[i, i] = h_diag[i]
            H[N + 1 - i, N + 1 - i] = h_diag[i]
        end
        H *= 2*h # note the factor of 2 is to define the operator between -1 and 1 since the original operators are defined between 0 and 1
        Q = zeros(N,N)
        
        # interior stencil (4th order)
        d = [1/12, -2/3, 0, 2/3, -1/12]
        for i in 1:N
            for k = -2:2
                j = i + k
                if j >= 1 && j <= N
                    Q[i,j] = d[k+3]
                end
            end
        end

        Qmat = [
            -5.0000000000000e-01   6.5605279837843e-01  -1.9875859409017e-01   4.2705795711740e-02   0.0  0.0
            -6.5605279837843e-01   0.0                   8.1236966439895e-01  -1.5631686602052e-01   0.0  0.0
            1.9875859409017e-01  -8.1236966439895e-01   0.0                   6.9694440364211e-01  -8.3333333333333e-02  0.0
            -4.2705795711740e-02   1.5631686602052e-01  -6.9694440364211e-01   0.0                   6.6666666666667e-01 -8.3333333333333e-02
        ]

        for i = 1:BP
            for j = 1:BP
                Q[i,j] = Qmat[i,j]
                Q[N+1-i, N+1-j] = -Qmat[i,j]
            end
        end
    elseif p == 3
        N = 13 # 6 boundary points
        BP = 6
        m = 3

        x0 =  0.0000000000000e+00
        x1 =  4.4090263368623e-01
        x2 =  1.2855984345073e+00
        x3 =  2.2638953951239e+00
        x4 =  3.2638953951239e+00
        x5 =  4.2638953951239e+00
        x6 =  5.2638953951239e+00
        
        xb = [x0, x1, x2, x3, x4, x5, x6][1:m+1]

        h = L / (2*xb[end] + N - 1 - 2*m)
        xmid = LinRange(xb[end]+1, L/h - xb[end] - 1, N - 2*(m+1))
        x = h .* vcat(xb, collect(xmid), (L/h) .- reverse(xb))

        H1_1 =  1.3030223027124e-01
        H2_2 =  6.8851501587715e-01
        H3_3 =  9.5166202564389e-01
        H4_4 =  9.9103890475697e-01
        H5_5 =  1.0028757074552e+00
        H6_6 =  9.9950151111941e-01
        h_diag = [H1_1, H2_2, H3_3, H4_4, H5_5, H6_6]
        
        H = Matrix{Float64}(I, N, N)
        for i in 1:length(h_diag)
            H[i, i] = h_diag[i]
            H[N + 1 - i, N + 1 - i] = h_diag[i]
        end

        H *=2*h
        Q = zeros(N,N)
        d = [-1/60,3/20,-3/4,0,3/4,-3/20,1/60];
        for i in 1:N
            for k = -3:3
                j = i + k
                if j >= 1 && j <= N
                    Q[i,j] = d[k+4]
                end
            end
        end

        Qmat = [
            -5.0000000000000e-01   6.6042071945824e-01  -2.2104152954203e-01   7.6243679810093e-02  -1.7298206716724e-02   1.6753369904210e-03   0.0   0.0   0.0
            -6.6042071945824e-01   0.0                   8.7352798702787e-01  -2.6581719253084e-01   5.7458484948314e-02  -4.7485599871040e-03   0.0   0.0   0.0
             2.2104152954203e-01  -8.7352798702787e-01   0.0                   8.1707122038457e-01  -1.8881125503769e-01   2.4226492138960e-02   0.0   0.0   0.0
            -7.6243679810093e-02   2.6581719253084e-01  -8.1707122038457e-01   0.0                   7.6798636652679e-01  -1.5715532552963e-01   1.6666666666667e-02  0.0  0.0
             1.7298206716724e-02  -5.7458484948314e-02   1.8881125503769e-01  -7.6798636652679e-01   0.0                   7.5266872305402e-01  -1.5000000000000e-01   1.6666666666667e-02  0.0
            -1.6753369904210e-03   4.7485599871040e-03  -2.4226492138960e-02   1.5715532552963e-01  -7.5266872305402e-01   0.0                   7.5000000000000e-01  -1.5000000000000e-01  1.6666666666667e-02
         ]

         for i = 1:BP
            for j = 1:BP
                Q[i,j] = Qmat[i,j]
                Q[N+1-i, N+1-j] = -Qmat[i,j]
            end
        end     
    elseif p == 4
        N = 17 # 8 boundary points
        BP = 8
        m = 4
        
        x0 =  0.0000000000000e+00
        x1 =  3.8118550247622e-01
        x2 =  1.1899550868338e+00
        x3 =  2.2476300175641e+00
        x4 =  3.3192851303204e+00
        x5 =  4.3192851303204e+00
        x6 =  5.3192851303204e+00
        x7 =  6.3192851303204e+00
        x8 =  7.3192851303204e+00    
        
        xb = [x0, x1, x2, x3, x4, x5, x6, x7, x8][1:m+1]

        h = L / (2*xb[end] + N - 1 - 2*m)
        xmid = LinRange(xb[end]+1, L/h - xb[end] - 1, N - 2*(m+1))
        x = h .* vcat(xb, collect(xmid), (L/h) .- reverse(xb))

        H1 =  1.0758368078310e-01
        H2 =  6.1909685107891e-01
        H3 =  9.6971176519117e-01
        H4 =  1.1023441350947e+00
        H5 =  1.0244688965833e+00
        H6 =  9.9533550116831e-01
        H7 =  1.0008236941028e+00
        H8 =  9.9992060631812e-01      
        h_diag = [H1,H2,H3,H4,H5,H6,H7,H8]

        H = Matrix{Float64}(I, N, N)
        for i in 1:length(h_diag)
            H[i, i] = h_diag[i]
            H[N + 1 - i, N + 1 - i] = h_diag[i]
        end       
        H *= 2*h # note the factor of 2 is to define the operator between -1 and 1 since the original operators are defined between 0 and 1
        Q = zeros(N,N)

        # interior stencil (4th order)
        d = [1/280,-4/105,1/5,-4/5,0,4/5,-1/5,4/105,-1/280]
        for i in 1:N
            for k = -4:4
                j = i + k
                if j >= 1 && j <= N
                    Q[i,j] = d[k+5]
                end
            end
        end                
        Qmat = [-5.0000000000000e-01   6.7284756079369e-01  -2.5969732837062e-01   1.3519390385721e-01  -6.9678474730984e-02   2.6434024071371e-02  -5.5992311465618e-03   4.9954552590464e-04   0.0   0.0   0.0   0.0
            -6.7284756079369e-01   0.0                   9.4074021172233e-01  -4.0511642426516e-01   1.9369192209331e-01  -6.8638079843479e-02   1.3146457241484e-02  -9.7652615479254e-04   0.0   0.0   0.0   0.0
             2.5969732837062e-01  -9.4074021172233e-01   0.0                   9.4316393361096e-01  -3.5728039257451e-01   1.1266686855013e-01  -1.8334941452280e-02   8.2741521740941e-04   0.0   0.0   0.0   0.0
            -1.3519390385721e-01   4.0511642426516e-01  -9.4316393361096e-01   0.0                   8.7694387866575e-01  -2.4698058719506e-01   4.7291642094198e-02  -4.0135203618880e-03   0.0   0.0   0.0   0.0
             6.9678474730984e-02  -1.9369192209331e-01   3.5728039257451e-01  -8.7694387866575e-01   0.0                   8.1123946853807e-01  -2.0267150541446e-01   3.8680398901392e-02  -3.5714285714286e-03   0.0   0.0   0.0
            -2.6434024071371e-02   6.8638079843479e-02  -1.1266686855013e-01   2.4698058719506e-01  -8.1123946853807e-01   0.0                   8.0108544742793e-01  -2.0088756283071e-01   3.8095238095238e-02  -3.5714285714286e-03   0.0   0.0
             5.5992311465618e-03  -1.3146457241484e-02   1.8334941452280e-02  -4.7291642094198e-02   2.0267150541446e-01  -8.0108544742793e-01   0.0                   8.0039405922650e-01  -2.0000000000000e-01   3.8095238095238e-02  -3.5714285714286e-03   0.0
            -4.9954552590464e-04   9.7652615479254e-04  -8.2741521740941e-04   4.0135203618880e-03  -3.8680398901392e-02   2.0088756283071e-01  -8.0039405922650e-01   0.0                   8.0000000000000e-01  -2.0000000000000e-01   3.8095238095238e-02  -3.5714285714286e-03]
        for i = 1:BP
            for j = 1:BP
                Q[i,j] = Qmat[i,j]
                Q[N+1-i, N+1-j] = -Qmat[i,j]
            end
        end      
    elseif p == 5
        N = 21 # 10 boundary points
        BP = 10
        m = 5

        x0 =  0.0000000000000e+00
        x1 =  3.5902433622052e-01
        x2 =  1.1436659188355e+00
        x3 =  2.2144895894456e+00
        x4 =  3.3682742337736e+00
        x5 =  4.4309689056870e+00
        x6 =  5.4309689056870e+00
        x7 =  6.4309689056870e+00
        x8 =  7.4309689056870e+00
        x9 =  8.4309689056870e+00
        x10 =  9.4309689056870e+00
        xb = [x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10][1:m+1]

        h = L / (2*xb[end] + N - 1 - 2*m)
        xmid = LinRange(xb[end]+1, L/h - xb[end] - 1, N - 2*(m+1))
        x = h .* vcat(xb, collect(xmid), (L/h) .- reverse(xb))

        H1 =  1.0000000000000e-01;
        H2 =  5.8980851260667e-01;
        H3 =  9.5666820955973e-01;
        H4 =  1.1500297411596e+00;
        H5 =  1.1232986993248e+00;
        H6 =  1.0123020150951e+00;
        H7 =  9.9877122702527e-01;
        H8 =  1.0000873322761e+00;
        H9 =  1.0000045540888e+00;
        H10 =  9.9999861455083e-01;
        h_diag = [H1,H2,H3,H4,H5,H6,H7,H8,H9,H10]

        H = Matrix{Float64}(I, N, N)
        for i in 1:length(h_diag)
            H[i, i] = h_diag[i]
            H[N + 1 - i, N + 1 - i] = h_diag[i]
        end       
        H *= 2*h # note the factor of 2 is to define the operator between -1 and 1 since the original operators are defined between 0 and 1
        Q = zeros(N,N)       

        # interior stencil (4th order)
        d = [-1/1260,5/504,-5/84,5/21,-5/6,0,5/6,-5/21,5/84,-5/504,1/1260]
        for i in 1:N
            for k = -5:5
                j = i + k
                if j >= 1 && j <= N
                    Q[i,j] = d[k+6]
                end
            end
        end       

        Q0_0 = -5.0000000000000e-01
        Q0_1 =  6.7548747038002e-01
        Q0_2 = -2.6691978151546e-01
        Q0_3 =  1.4438714982130e-01
        Q0_4 = -7.7273673750760e-02
        Q0_5 =  2.5570078343005e-02
        Q0_6 =  4.2808774693299e-03
        Q0_7 = -8.2902108933389e-03
        Q0_8 =  3.2031176427908e-03
        Q0_9 = -4.4502749689556e-04
        Q0_10 =  0.0000000000000e+00
        Q0_11 =  0.0000000000000e+00
        Q0_12 =  0.0000000000000e+00
        Q0_13 =  0.0000000000000e+00
        Q0_14 =  0.0000000000000e+00
        Q1_0 = -6.7548747038002e-01
        Q1_1 =  0.0000000000000e+00
        Q1_2 =  9.5146052715180e-01
        Q1_3 = -4.2442349882626e-01
        Q1_4 =  2.1538865145190e-01
        Q1_5 = -7.1939778160350e-02
        Q1_6 = -8.2539187832840e-03
        Q1_7 =  1.9930661669090e-02
        Q1_8 = -7.7433256989613e-03
        Q1_9 =  1.0681515760869e-03
        Q1_10 =  0.0000000000000e+00
        Q1_11 =  0.0000000000000e+00
        Q1_12 =  0.0000000000000e+00
        Q1_13 =  0.0000000000000e+00
        Q1_14 =  0.0000000000000e+00
        Q2_0 =  2.6691978151546e-01
        Q2_1 = -9.5146052715180e-01
        Q2_2 =  0.0000000000000e+00
        Q2_3 =  9.6073770842387e-01
        Q2_4 = -3.9378595264609e-01
        Q2_5 =  1.3302097358959e-01
        Q2_6 =  8.1200458151489e-05
        Q2_7 = -2.3849770528789e-02
        Q2_8 =  9.6600442856829e-03
        Q2_9 = -1.3234579460680e-03
        Q2_10 =  0.0000000000000e+00
        Q2_11 =  0.0000000000000e+00
        Q2_12 =  0.0000000000000e+00
        Q2_13 =  0.0000000000000e+00
        Q2_14 =  0.0000000000000e+00
        Q3_0 = -1.4438714982130e-01
        Q3_1 =  4.2442349882626e-01
        Q3_2 = -9.6073770842387e-01
        Q3_3 =  0.0000000000000e+00
        Q3_4 =  9.1551097634196e-01
        Q3_5 = -2.8541713079648e-01
        Q3_6 =  4.1398809121293e-02
        Q3_7 =  1.7256059167927e-02
        Q3_8 = -9.4349194803610e-03
        Q3_9 =  1.3875650645663e-03
        Q3_10 =  0.0000000000000e+00
        Q3_11 =  0.0000000000000e+00
        Q3_12 =  0.0000000000000e+00
        Q3_13 =  0.0000000000000e+00
        Q3_14 =  0.0000000000000e+00
        Q4_0 =  7.7273673750760e-02
        Q4_1 = -2.1538865145190e-01
        Q4_2 =  3.9378595264609e-01
        Q4_3 = -9.1551097634196e-01
        Q4_4 =  0.0000000000000e+00
        Q4_5 =  8.3519401865051e-01
        Q4_6 = -2.0586492924974e-01
        Q4_7 =  3.1230261235901e-02
        Q4_8 = -2.0969453466651e-04
        Q4_9 = -5.0965470499782e-04
        Q4_10 =  0.0000000000000e+00
        Q4_11 =  0.0000000000000e+00
        Q4_12 =  0.0000000000000e+00
        Q4_13 =  0.0000000000000e+00
        Q4_14 =  0.0000000000000e+00
        Q5_0 = -2.5570078343005e-02
        Q5_1 =  7.1939778160350e-02
        Q5_2 = -1.3302097358959e-01
        Q5_3 =  2.8541713079648e-01
        Q5_4 = -8.3519401865051e-01
        Q5_5 =  0.0000000000000e+00
        Q5_6 =  8.1046389580138e-01
        Q5_7 = -2.1879194972141e-01
        Q5_8 =  5.2977237804899e-02
        Q5_9 = -9.0146730522360e-03
        Q5_10 =  7.9365079365079e-04
        Q5_11 =  0.0000000000000e+00
        Q5_12 =  0.0000000000000e+00
        Q5_13 =  0.0000000000000e+00
        Q5_14 =  0.0000000000000e+00
        Q6_0 = -4.2808774693299e-03
        Q6_1 =  8.2539187832840e-03
        Q6_2 = -8.1200458151489e-05
        Q6_3 = -4.1398809121293e-02
        Q6_4 =  2.0586492924974e-01
        Q6_5 = -8.1046389580138e-01
        Q6_6 =  0.0000000000000e+00
        Q6_7 =  8.2787884456005e-01
        Q6_8 = -2.3582460382545e-01
        Q6_9 =  5.9178678209520e-02
        Q6_10 = -9.9206349206349e-03
        Q6_11 =  7.9365079365079e-04
        Q6_12 =  0.0000000000000e+00
        Q6_13 =  0.0000000000000e+00
        Q6_14 =  0.0000000000000e+00
        Q7_0 =  8.2902108933389e-03
        Q7_1 = -1.9930661669090e-02
        Q7_2 =  2.3849770528789e-02
        Q7_3 = -1.7256059167927e-02
        Q7_4 = -3.1230261235901e-02
        Q7_5 =  2.1879194972141e-01
        Q7_6 = -8.2787884456005e-01
        Q7_7 =  0.0000000000000e+00
        Q7_8 =  8.3301028859275e-01
        Q7_9 = -2.3804321850015e-01
        Q7_10 =  5.9523809523809e-02
        Q7_11 = -9.9206349206349e-03
        Q7_12 =  7.9365079365079e-04
        Q7_13 =  0.0000000000000e+00
        Q7_14 =  0.0000000000000e+00
        Q8_0 = -3.2031176427908e-03
        Q8_1 =  7.7433256989613e-03
        Q8_2 = -9.6600442856829e-03
        Q8_3 =  9.4349194803610e-03
        Q8_4 =  2.0969453466651e-04
        Q8_5 = -5.2977237804899e-02
        Q8_6 =  2.3582460382545e-01
        Q8_7 = -8.3301028859275e-01
        Q8_8 =  0.0000000000000e+00
        Q8_9 =  8.3333655748509e-01
        Q8_10 = -2.3809523809524e-01
        Q8_11 =  5.9523809523809e-02
        Q8_12 = -9.9206349206349e-03
        Q8_13 =  7.9365079365079e-04
        Q8_14 =  0.0000000000000e+00
        Q9_0 =  4.4502749689556e-04
        Q9_1 = -1.0681515760869e-03
        Q9_2 =  1.3234579460680e-03
        Q9_3 = -1.3875650645663e-03
        Q9_4 =  5.0965470499782e-04
        Q9_5 =  9.0146730522360e-03
        Q9_6 = -5.9178678209520e-02
        Q9_7 =  2.3804321850015e-01
        Q9_8 = -8.3333655748509e-01
        Q9_9 =  0.0000000000000e+00
        Q9_10 =  8.3333333333333e-01
        Q9_11 = -2.3809523809524e-01
        Q9_12 =  5.9523809523809e-02
        Q9_13 = -9.9206349206349e-03
        Q9_14 =  7.9365079365079e-04   
        
        Qmat = [ Q0_0   Q0_1   Q0_2   Q0_3   Q0_4   Q0_5   Q0_6   Q0_7   Q0_8   Q0_9   Q0_10  Q0_11  Q0_12  Q0_13  Q0_14;
            Q1_0   Q1_1   Q1_2   Q1_3   Q1_4   Q1_5   Q1_6   Q1_7   Q1_8   Q1_9   Q1_10  Q1_11  Q1_12  Q1_13  Q1_14;
            Q2_0   Q2_1   Q2_2   Q2_3   Q2_4   Q2_5   Q2_6   Q2_7   Q2_8   Q2_9   Q2_10  Q2_11  Q2_12  Q2_13  Q2_14;
            Q3_0   Q3_1   Q3_2   Q3_3   Q3_4   Q3_5   Q3_6   Q3_7   Q3_8   Q3_9   Q3_10  Q3_11  Q3_12  Q3_13  Q3_14;
            Q4_0   Q4_1   Q4_2   Q4_3   Q4_4   Q4_5   Q4_6   Q4_7   Q4_8   Q4_9   Q4_10  Q4_11  Q4_12  Q4_13  Q4_14;
            Q5_0   Q5_1   Q5_2   Q5_3   Q5_4   Q5_5   Q5_6   Q5_7   Q5_8   Q5_9   Q5_10  Q5_11  Q5_12  Q5_13  Q5_14;
            Q6_0   Q6_1   Q6_2   Q6_3   Q6_4   Q6_5   Q6_6   Q6_7   Q6_8   Q6_9   Q6_10  Q6_11  Q6_12  Q6_13  Q6_14;
            Q7_0   Q7_1   Q7_2   Q7_3   Q7_4   Q7_5   Q7_6   Q7_7   Q7_8   Q7_9   Q7_10  Q7_11  Q7_12  Q7_13  Q7_14;
            Q8_0   Q8_1   Q8_2   Q8_3   Q8_4   Q8_5   Q8_6   Q8_7   Q8_8   Q8_9   Q8_10  Q8_11  Q8_12  Q8_13  Q8_14;
            Q9_0   Q9_1   Q9_2   Q9_3   Q9_4   Q9_5   Q9_6   Q9_7   Q9_8   Q9_9   Q9_10  Q9_11  Q9_12  Q9_13  Q9_14 ]
        for i = 1:BP
            for j = 1:BP
                Q[i,j] = Qmat[i,j]
                Q[N+1-i, N+1-j] = -Qmat[i,j]
            end
        end           
    elseif p == 6
        N = 25 # 12 boundary points
        BP = 12
        m = 6  
        
        x0 =  0.0000000000000e+00
        x1 =  3.6098032343909e-01
        x2 =  1.1634317168086e+00
        x3 =  2.2975905356987e+00
        x4 =  3.6057529790929e+00
        x5 =  4.8918275675510e+00
        x6 =  6.0000000000000e+00
        x7 =  7.0000000000000e+00
        x8 =  8.0000000000000e+00
        x9 =  9.0000000000000e+00
        x10 =  1.0000000000000e+01
        x11 =  1.1000000000000e+01
        x12 =  1.2000000000000e+01   
        xb = [x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12][1:m+1]

        h = L / (2*xb[end] + N - 1 - 2*m)
        xmid = LinRange(xb[end]+1, L/h - xb[end] - 1, N - 2*(m+1))
        x = h .* vcat(xb, collect(xmid), (L/h) .- reverse(xb))     

        H1 =  1.0000000000011e-01;
        H2 =  5.9616216757547e-01;
        H3 =  9.9065699844442e-01;
        H4 =  1.2512548713913e+00;
        H5 =  1.3316678989403e+00;
        H6 =  1.2093375037721e+00;
        H7 =  1.0236491595704e+00;
        H8 =  9.9685258909811e-01;
        H9 =  1.0004766563923e+00;
        H10 =  9.9993617879146e-01;
        H11 =  1.0000063122914e+00;
        H12 =  9.9999966373260e-01;
        h_diag = [H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,H11,H12]

        H = Matrix{Float64}(I, N, N)
        for i in 1:length(h_diag)
            H[i, i] = h_diag[i]
            H[N + 1 - i, N + 1 - i] = h_diag[i]
        end       
        H *= 2*h # note the factor of 2 is to define the operator between -1 and 1 since the original operators are defined between 0 and 1
        Q = zeros(N,N)  
        d = [1/5544,-1/385,1/56,-5/63,15/56,-6/7,0,6/7,-15/56,5/63,-1/56,1/385,-1/5544]
        for i in 1:N
            for k = -6:6
                j = i + k
                if j >= 1 && j <= N
                    Q[i,j] = d[k+7]
                end
            end
        end       
        
        Q0_0 = -5.0000000000000e-01
        Q0_1 =  6.7597560728423e-01
        Q0_2 = -2.6859785384416e-01
        Q0_3 =  1.4850302678903e-01
        Q0_4 = -8.7976689586154e-02
        Q0_5 =  4.1833336322613e-02
        Q0_6 = -2.2216684976993e-03
        Q0_7 = -1.5910034062022e-02
        Q0_8 =  1.1296706376589e-02
        Q0_9 = -3.1823678285130e-03
        Q0_10 =  2.4843594063649e-04
        Q0_11 =  3.1501105449828e-05
        Q0_12 =  0.0000000000000e+00
        Q0_13 =  0.0000000000000e+00
        Q0_14 =  0.0000000000000e+00
        Q0_15 =  0.0000000000000e+00
        Q0_16 =  0.0000000000000e+00
        Q0_17 =  0.0000000000000e+00
        Q1_0 = -6.7597560728423e-01
        Q1_1 =  0.0000000000000e+00
        Q1_2 =  9.5424013647146e-01
        Q1_3 = -4.3389334603464e-01
        Q1_4 =  2.4285669347653e-01
        Q1_5 = -1.1443465137214e-01
        Q1_6 =  8.5942765682435e-03
        Q1_7 =  4.0290424215772e-02
        Q1_8 = -2.9396383714543e-02
        Q1_9 =  8.5601827834256e-03
        Q1_10 = -7.8128092862319e-04
        Q1_11 = -6.0444181254875e-05
        Q1_12 =  0.0000000000000e+00
        Q1_13 =  0.0000000000000e+00
        Q1_14 =  0.0000000000000e+00
        Q1_15 =  0.0000000000000e+00
        Q1_16 =  0.0000000000000e+00
        Q1_17 =  0.0000000000000e+00
        Q2_0 =  2.6859785384416e-01
        Q2_1 = -9.5424013647146e-01
        Q2_2 =  0.0000000000000e+00
        Q2_3 =  9.7065114311923e-01
        Q2_4 = -4.3205328628292e-01
        Q2_5 =  1.9549970932735e-01
        Q2_6 = -2.4406885385172e-02
        Q2_7 = -5.5737279079895e-02
        Q2_8 =  4.3772338637753e-02
        Q2_9 = -1.3727655130726e-02
        Q2_10 =  1.6271304373071e-03
        Q2_11 =  1.7066984372933e-05
        Q2_12 =  0.0000000000000e+00
        Q2_13 =  0.0000000000000e+00
        Q2_14 =  0.0000000000000e+00
        Q2_15 =  0.0000000000000e+00
        Q2_16 =  0.0000000000000e+00
        Q2_17 =  0.0000000000000e+00
        Q3_0 = -1.4850302678903e-01
        Q3_1 =  4.3389334603464e-01
        Q3_2 = -9.7065114311923e-01
        Q3_3 =  0.0000000000000e+00
        Q3_4 =  9.5375878629204e-01
        Q3_5 = -3.6113954384951e-01
        Q3_6 =  6.9749289223875e-02
        Q3_7 =  6.5161366516465e-02
        Q3_8 = -6.0325702283960e-02
        Q3_9 =  2.1188913621662e-02
        Q3_10 = -3.2632650250470e-03
        Q3_11 =  1.3097937809499e-04
        Q3_12 =  0.0000000000000e+00
        Q3_13 =  0.0000000000000e+00
        Q3_14 =  0.0000000000000e+00
        Q3_15 =  0.0000000000000e+00
        Q3_16 =  0.0000000000000e+00
        Q3_17 =  0.0000000000000e+00
        Q4_0 =  8.7976689586154e-02
        Q4_1 = -2.4285669347653e-01
        Q4_2 =  4.3205328628292e-01
        Q4_3 = -9.5375878629204e-01
        Q4_4 =  0.0000000000000e+00
        Q4_5 =  8.8676146394834e-01
        Q4_6 = -2.1292503103800e-01
        Q4_7 = -4.6037018833218e-02
        Q4_8 =  7.4338719466734e-02
        Q4_9 = -3.1217656663809e-02
        Q4_10 =  6.1239492854797e-03
        Q4_11 = -4.5892226603067e-04
        Q4_12 =  0.0000000000000e+00
        Q4_13 =  0.0000000000000e+00
        Q4_14 =  0.0000000000000e+00
        Q4_15 =  0.0000000000000e+00
        Q4_16 =  0.0000000000000e+00
        Q4_17 =  0.0000000000000e+00
        Q5_0 = -4.1833336322613e-02
        Q5_1 =  1.1443465137214e-01
        Q5_2 = -1.9549970932735e-01
        Q5_3 =  3.6113954384951e-01
        Q5_4 = -8.8676146394834e-01
        Q5_5 =  0.0000000000000e+00
        Q5_6 =  7.7461223007026e-01
        Q5_7 = -1.0609547334165e-01
        Q5_8 = -4.4853791547749e-02
        Q5_9 =  3.2436468405486e-02
        Q5_10 = -8.4387621360184e-03
        Q5_11 =  8.5964292632428e-04
        Q5_12 =  0.0000000000000e+00
        Q5_13 =  0.0000000000000e+00
        Q5_14 =  0.0000000000000e+00
        Q5_15 =  0.0000000000000e+00
        Q5_16 =  0.0000000000000e+00
        Q5_17 =  0.0000000000000e+00
        Q6_0 =  2.2216684976993e-03
        Q6_1 = -8.5942765682435e-03
        Q6_2 =  2.4406885385172e-02
        Q6_3 = -6.9749289223875e-02
        Q6_4 =  2.1292503103800e-01
        Q6_5 = -7.7461223007026e-01
        Q6_6 =  0.0000000000000e+00
        Q6_7 =  7.4758103262966e-01
        Q6_8 = -1.5730779067906e-01
        Q6_9 =  2.6517620342970e-02
        Q6_10 = -4.3175367549700e-03
        Q6_11 =  1.1092605832824e-03
        Q6_12 = -1.8037518037522e-04
        Q6_13 =  0.0000000000000e+00
        Q6_14 =  0.0000000000000e+00
        Q6_15 =  0.0000000000000e+00
        Q6_16 =  0.0000000000000e+00
        Q6_17 =  0.0000000000000e+00
        Q7_0 =  1.5910034062022e-02
        Q7_1 = -4.0290424215772e-02
        Q7_2 =  5.5737279079895e-02
        Q7_3 = -6.5161366516465e-02
        Q7_4 =  4.6037018833218e-02
        Q7_5 =  1.0609547334165e-01
        Q7_6 = -7.4758103262966e-01
        Q7_7 =  0.0000000000000e+00
        Q7_8 =  8.0975719267918e-01
        Q7_9 = -2.3568822398349e-01
        Q7_10 =  6.9373143801571e-02
        Q7_11 = -1.6606121869177e-02
        Q7_12 =  2.5974025974031e-03
        Q7_13 = -1.8037518037522e-04
        Q7_14 =  0.0000000000000e+00
        Q7_15 =  0.0000000000000e+00
        Q7_16 =  0.0000000000000e+00
        Q7_17 =  0.0000000000000e+00
        Q8_0 = -1.1296706376589e-02
        Q8_1 =  2.9396383714543e-02
        Q8_2 = -4.3772338637753e-02
        Q8_3 =  6.0325702283960e-02
        Q8_4 = -7.4338719466734e-02
        Q8_5 =  4.4853791547749e-02
        Q8_6 =  1.5730779067906e-01
        Q8_7 = -8.0975719267918e-01
        Q8_8 =  0.0000000000000e+00
        Q8_9 =  8.4765775072084e-01
        Q8_10 = -2.6369594097148e-01
        Q8_11 =  7.8759594625702e-02
        Q8_12 = -1.7857142857146e-02
        Q8_13 =  2.5974025974031e-03
        Q8_14 = -1.8037518037522e-04
        Q8_15 =  0.0000000000000e+00
        Q8_16 =  0.0000000000000e+00
        Q8_17 =  0.0000000000000e+00
        Q9_0 =  3.1823678285130e-03
        Q9_1 = -8.5601827834256e-03
        Q9_2 =  1.3727655130726e-02
        Q9_3 = -2.1188913621662e-02
        Q9_4 =  3.1217656663809e-02
        Q9_5 = -3.2436468405486e-02
        Q9_6 = -2.6517620342970e-02
        Q9_7 =  2.3568822398349e-01
        Q9_8 = -8.4765775072084e-01
        Q9_9 =  0.0000000000000e+00
        Q9_10 =  8.5631774953989e-01
        Q9_11 = -2.6769768119702e-01
        Q9_12 =  7.9365079365093e-02
        Q9_13 = -1.7857142857146e-02
        Q9_14 =  2.5974025974031e-03
        Q9_15 = -1.8037518037522e-04
        Q9_16 =  0.0000000000000e+00
        Q9_17 =  0.0000000000000e+00
        Q10_0 = -2.4843594063649e-04
        Q10_0 = -2.4843594063649e-04
        Q10_1 =  7.8128092862319e-04
        Q10_1 =  7.8128092862319e-04
        Q10_2 = -1.6271304373071e-03
        Q10_2 = -1.6271304373071e-03
        Q10_3 =  3.2632650250470e-03
        Q10_3 =  3.2632650250470e-03
        Q10_4 = -6.1239492854797e-03
        Q10_4 = -6.1239492854797e-03
        Q10_5 =  8.4387621360184e-03
        Q10_5 =  8.4387621360184e-03
        Q10_6 =  4.3175367549700e-03
        Q10_6 =  4.3175367549700e-03
        Q10_7 = -6.9373143801571e-02
        Q10_7 = -6.9373143801571e-02
        Q10_8 =  2.6369594097148e-01
        Q10_8 =  2.6369594097148e-01
        Q10_9 = -8.5631774953989e-01
        Q10_9 = -8.5631774953989e-01
        Q10_10 =  0.0000000000000e+00
        Q10_10 =  0.0000000000000e+00
        Q10_11 =  8.5712580212095e-01
        Q10_11 =  8.5712580212095e-01
        Q10_12 = -2.6785714285718e-01
        Q10_12 = -2.6785714285718e-01
        Q10_13 =  7.9365079365093e-02
        Q10_13 =  7.9365079365093e-02
        Q10_14 = -1.7857142857146e-02
        Q10_14 = -1.7857142857146e-02
        Q10_15 =  2.5974025974031e-03
        Q10_15 =  2.5974025974031e-03
        Q10_16 = -1.8037518037522e-04
        Q10_16 = -1.8037518037522e-04
        Q10_17 =  0.0000000000000e+00
        Q10_17 =  0.0000000000000e+00
        Q11_0 = -3.1501105449828e-05
        Q11_0 = -3.1501105449828e-05
        Q11_1 =  6.0444181254875e-05
        Q11_1 =  6.0444181254875e-05
        Q11_2 = -1.7066984372933e-05
        Q11_2 = -1.7066984372933e-05
        Q11_3 = -1.3097937809499e-04
        Q11_3 = -1.3097937809499e-04
        Q11_4 =  4.5892226603067e-04
        Q11_4 =  4.5892226603067e-04
        Q11_5 = -8.5964292632428e-04
        Q11_5 = -8.5964292632428e-04
        Q11_6 = -1.1092605832824e-03
        Q11_6 = -1.1092605832824e-03
        Q11_7 =  1.6606121869177e-02
        Q11_7 =  1.6606121869177e-02
        Q11_8 = -7.8759594625702e-02
        Q11_8 = -7.8759594625702e-02
        Q11_9 =  2.6769768119702e-01
        Q11_9 =  2.6769768119702e-01
        Q11_10 = -8.5712580212095e-01
        Q11_10 = -8.5712580212095e-01
        Q11_11 =  0.0000000000000e+00
        Q11_11 =  0.0000000000000e+00
        Q11_12 =  8.5714285714289e-01
        Q11_12 =  8.5714285714289e-01
        Q11_13 = -2.6785714285718e-01
        Q11_13 = -2.6785714285718e-01
        Q11_14 =  7.9365079365093e-02
        Q11_14 =  7.9365079365093e-02
        Q11_15 = -1.7857142857146e-02
        Q11_15 = -1.7857142857146e-02
        Q11_16 =  2.5974025974031e-03
        Q11_16 =  2.5974025974031e-03
        Q11_17 = -1.8037518037522e-04
        Q11_17 = -1.8037518037522e-04       

        Qmat = [
            Q0_0   Q0_1   Q0_2   Q0_3   Q0_4   Q0_5   Q0_6   Q0_7   Q0_8   Q0_9   Q0_10  Q0_11  Q0_12  Q0_13  Q0_14  Q0_15  Q0_16  Q0_17;
            Q1_0   Q1_1   Q1_2   Q1_3   Q1_4   Q1_5   Q1_6   Q1_7   Q1_8   Q1_9   Q1_10  Q1_11  Q1_12  Q1_13  Q1_14  Q1_15  Q1_16  Q1_17;
            Q2_0   Q2_1   Q2_2   Q2_3   Q2_4   Q2_5   Q2_6   Q2_7   Q2_8   Q2_9   Q2_10  Q2_11  Q2_12  Q2_13  Q2_14  Q2_15  Q2_16  Q2_17;
            Q3_0   Q3_1   Q3_2   Q3_3   Q3_4   Q3_5   Q3_6   Q3_7   Q3_8   Q3_9   Q3_10  Q3_11  Q3_12  Q3_13  Q3_14  Q3_15  Q3_16  Q3_17;
            Q4_0   Q4_1   Q4_2   Q4_3   Q4_4   Q4_5   Q4_6   Q4_7   Q4_8   Q4_9   Q4_10  Q4_11  Q4_12  Q4_13  Q4_14  Q4_15  Q4_16  Q4_17;
            Q5_0   Q5_1   Q5_2   Q5_3   Q5_4   Q5_5   Q5_6   Q5_7   Q5_8   Q5_9   Q5_10  Q5_11  Q5_12  Q5_13  Q5_14  Q5_15  Q5_16  Q5_17;
            Q6_0   Q6_1   Q6_2   Q6_3   Q6_4   Q6_5   Q6_6   Q6_7   Q6_8   Q6_9   Q6_10  Q6_11  Q6_12  Q6_13  Q6_14  Q6_15  Q6_16  Q6_17;
            Q7_0   Q7_1   Q7_2   Q7_3   Q7_4   Q7_5   Q7_6   Q7_7   Q7_8   Q7_9   Q7_10  Q7_11  Q7_12  Q7_13  Q7_14  Q7_15  Q7_16  Q7_17;
            Q8_0   Q8_1   Q8_2   Q8_3   Q8_4   Q8_5   Q8_6   Q8_7   Q8_8   Q8_9   Q8_10  Q8_11  Q8_12  Q8_13  Q8_14  Q8_15  Q8_16  Q8_17;
            Q9_0   Q9_1   Q9_2   Q9_3   Q9_4   Q9_5   Q9_6   Q9_7   Q9_8   Q9_9   Q9_10  Q9_11  Q9_12  Q9_13  Q9_14  Q9_15  Q9_16  Q9_17;
            Q10_0  Q10_1  Q10_2  Q10_3  Q10_4  Q10_5  Q10_6  Q10_7  Q10_8  Q10_9  Q10_10 Q10_11 Q10_12 Q10_13 Q10_14 Q10_15 Q10_16 Q10_17;
            Q11_0  Q11_1  Q11_2  Q11_3  Q11_4  Q11_5  Q11_6  Q11_7  Q11_8  Q11_9  Q11_10 Q11_11 Q11_12 Q11_13 Q11_14 Q11_15 Q11_16 Q11_17]

        for i = 1:BP
            for j = 1:BP
                Q[i,j] = Qmat[i,j]
                Q[N+1-i, N+1-j] = -Qmat[i,j]
            end
        end          
        
    else
        error("p=2,3,4,5, or 6 only")
    end
       
    # map nodes between -1 and 1
    for i = 1:N
        x[i] = 2*x[i]-1;
    end

    # differentiation matrix
    D = H \ Q

    return D, Q, H, x
end

# from 2017 paper: Boundary optimized diagonal-norm SBP operators
# operators optimized for minimum number of boundary points
function get_1d_minimal(p::Int, L::Float64=1.0)
    if p == 2
        N = 7
        BP = 3
        m = 1

        x0 =  0.0000000000000e+00
        x1 =  7.7122987842562e-01
        x2 =  1.7712298784256e+00
        x3 =  2.7712298784256e+00    

        xb = [x0, x1, x2, x3][1:m+1]

        h = L / (2*xb[end] + N - 1 - 2*m)
        xmid = LinRange(xb[end]+1, L/h - xb[end] - 1, N - 2*(m+1))
        x = h .* vcat(xb, collect(xmid), (L/h) .- reverse(xb))

        H1 =  2.6864248295847e-01
        H2 =  1.0094667153500e+00
        H3 =  9.9312068011715e-01
        h_diag = [H1,H2,H3]

        H = Matrix{Float64}(I, N, N)
        for i in 1:length(h_diag)
            H[i, i] = h_diag[i]
            H[N + 1 - i, N + 1 - i] = h_diag[i]
        end       
        H *= 2*h # note the factor of 2 is to define the operator between -1 and 1 since the original operators are defined between 0 and 1
        Q = zeros(N,N)

        d = [1/12,-2/3,0,2/3,-1/12]     
        for i in 1:N
            for k = -2:2
                j = i + k
                if j >= 1 && j <= N
                    Q[i,j] = d[k+3]
                end
            end
        end  
        Qmat = [-5.0000000000000e-01   6.1697245625434e-01  -1.1697245625434e-01   0.0000000000000e+00   0.0000000000000e+00
            -6.1697245625434e-01   0.0000000000000e+00   7.0030578958767e-01  -8.3333333333333e-02   0.0000000000000e+00
             1.1697245625434e-01  -7.0030578958767e-01   0.0000000000000e+00   6.6666666666667e-01  -8.3333333333333e-02]
         
        for i = 1:BP
            for j = 1:BP
                Q[i,j] = Qmat[i,j]
                Q[N+1-i, N+1-j] = -Qmat[i,j]
            end
        end  
    elseif p == 3
        N = 11
        BP = 5
        m = 2

        x0 =  0.0000000000000e+00
        x1 =  4.0842950991998e-01
        x2 =  1.1968523189207e+00
        x3 =  2.1968523189207e+00
        x4 =  3.1968523189207e+00
        x5 =  4.1968523189207e+00

        xb = [x0, x1, x2, x3, x4, x5][1:m+1]

        h = L / (2*xb[end] + N - 1 - 2*m)
        xmid = LinRange(xb[end]+1, L/h - xb[end] - 1, N - 2*(m+1))
        x = h .* vcat(xb, collect(xmid), (L/h) .- reverse(xb))

        H1 =  1.2740260779883e-01
        H2 =  6.1820981002054e-01
        H3 =  9.4308973897679e-01
        H4 =  1.0093019060199e+00
        H5 =  9.9884825610465e-01

        h_diag = [H1,H2,H3,H4,H5]

        H = Matrix{Float64}(I, N, N)
        for i in 1:length(h_diag)
            H[i, i] = h_diag[i]
            H[N + 1 - i, N + 1 - i] = h_diag[i]
        end       
        H *= 2*h # note the factor of 2 is to define the operator between -1 and 1 since the original operators are defined between 0 and 1
        Q = zeros(N,N)

        d = [-1/60,3/20,-3/4,0,3/4,-3/20,1/60]
        for i in 1:N
            for k = -3:3
                j = i + k
                if j >= 1 && j <= N
                    Q[i,j] = d[k+4]
                end
            end
        end  

        Qmat = [-5.0000000000000e-01   6.3217364546846e-01  -1.6411963429825e-01   3.6495407984639e-02  -4.5494191548490e-03   0.0000000000000e+00   0.0000000000000e+00   0.0000000000000e+00
            -6.3217364546846e-01   0.0000000000000e+00   8.0515625504417e-01  -2.0755653563249e-01   3.4573926056780e-02   0.0000000000000e+00   0.0000000000000e+00   0.0000000000000e+00
             1.6411963429825e-01  -8.0515625504417e-01   0.0000000000000e+00   7.9402676057785e-01  -1.6965680649860e-01   1.6666666666667e-02   0.0000000000000e+00   0.0000000000000e+00
            -3.6495407984639e-02   2.0755653563249e-01  -7.9402676057785e-01   0.0000000000000e+00   7.5629896626333e-01  -1.5000000000000e-01   1.6666666666667e-02   0.0000000000000e+00
             4.5494191548490e-03  -3.4573926056780e-02   1.6965680649860e-01  -7.5629896626333e-01   0.0000000000000e+00   7.5000000000000e-01  -1.5000000000000e-01   1.6666666666667e-02]

        for i = 1:BP
            for j = 1:BP
                Q[i,j] = Qmat[i,j]
                Q[N+1-i, N+1-j] = -Qmat[i,j]
            end
        end
    elseif p == 4
        N = 13
        BP = 6
        m = 2

        x0 =  0.0000000000000e+00
        x1 =  4.9439570885261e-01
        x2 =  1.4051531374839e+00
        x3 =  2.4051531374839e+00
        x4 =  3.4051531374839e+00
        x5 =  4.4051531374839e+00
        x6 =  5.4051531374839e+00      
        
        xb = [x0, x1, x2, x3, x4, x5, x6][1:m+1]

        h = L / (2*xb[end] + N - 1 - 2*m)
        xmid = LinRange(xb[end]+1, L/h - xb[end] - 1, N - 2*(m+1))
        x = h .* vcat(xb, collect(xmid), (L/h) .- reverse(xb))

        H1 =  1.4523997892351e-01;
        H2 =  7.6864793350174e-01;
        H3 =  9.9116487068535e-01;
        H4 =  9.9992473335107e-01;
        H5 =  1.0002097054636e+00;
        H6 =  9.9996591555866e-01;

        h_diag = [H1,H2,H3,H4,H5,H6]
        H = Matrix{Float64}(I, N, N)
        for i in 1:length(h_diag)
            H[i, i] = h_diag[i]
            H[N + 1 - i, N + 1 - i] = h_diag[i]
        end  
        H *= 2*h # note the factor of 2 is to define the operator between -1 and 1 since the original operators are defined between 0 and 1
        Q = zeros(N,N)

        d = [1/280,-4/105,1/5,-4/5,0,4/5,-1/5,4/105,-1/280]
        for i in 1:N
            for k = -4:4
                j = i + k
                if j >= 1 && j <= N
                    Q[i,j] = d[k+5]
                end
            end
        end
        
        Qmat = [-5.0000000000000e-01   6.6697342753834e-01  -2.2919342278749e-01   7.4283116457276e-02  -1.2020661178873e-02  -4.2460029252999e-05   0.0000000000000e+00   0.0000000000000e+00   0.0000000000000e+00   0.0000000000000e+00
            -6.6697342753834e-01   0.0000000000000e+00   8.8241196934163e-01  -2.6653314104602e-01   5.5302527504316e-02  -4.2079282615860e-03   0.0000000000000e+00   0.0000000000000e+00   0.0000000000000e+00   0.0000000000000e+00
             2.2919342278749e-01  -8.8241196934163e-01   0.0000000000000e+00   8.2904844081126e-01  -2.1156614214635e-01   3.9307676460659e-02  -3.5714285714286e-03   0.0000000000000e+00   0.0000000000000e+00   0.0000000000000e+00
            -7.4283116457276e-02   2.6653314104602e-01  -8.2904844081126e-01   0.0000000000000e+00   8.0305501223679e-01  -2.0078040553808e-01   3.8095238095238e-02  -3.5714285714286e-03   0.0000000000000e+00   0.0000000000000e+00
             1.2020661178873e-02  -5.5302527504316e-02   2.1156614214635e-01  -8.0305501223679e-01   0.0000000000000e+00   8.0024692689207e-01  -2.0000000000000e-01   3.8095238095238e-02  -3.5714285714286e-03   0.0000000000000e+00
             4.2460029252999e-05   4.2079282615860e-03  -3.9307676460659e-02   2.0078040553808e-01  -8.0024692689207e-01   0.0000000000000e+00   8.0000000000000e-01  -2.0000000000000e-01   3.8095238095238e-02  -3.5714285714286e-03]
        for i = 1:BP
            for j = 1:BP
                Q[i,j] = Qmat[i,j]
                Q[N+1-i, N+1-j] = -Qmat[i,j]
            end
        end  

    elseif p == 5
        N = 17
        BP = 8
        m = 3

        x0 =  0.0000000000000e+00
        x1 =  5.8556160757529e-01
        x2 =  1.7473267488572e+00
        x3 =  3.0000000000000e+00
        x4 =  4.0000000000000e+00
        x5 =  5.0000000000000e+00
        x6 =  6.0000000000000e+00
        x7 =  7.0000000000000e+00
        x8 =  8.0000000000000e+00       

        xb = [x0, x1, x2, x3, x4, x5, x6, x7, x8][1:m+1]

        h = L / (2*xb[end] + N - 1 - 2*m)
        xmid = LinRange(xb[end]+1, L/h - xb[end] - 1, N - 2*(m+1))
        x = h .* vcat(xb, collect(xmid), (L/h) .- reverse(xb))

        H1 =  1.6717213975289e-01
        H2 =  9.3675739171278e-01
        H3 =  1.3035532379753e+00
        H4 =  1.1188461804303e+00
        H5 =  9.6664345922660e-01
        H6 =  1.0083235564392e+00
        H7 =  9.9858767377362e-01
        H8 =  1.0001163606893e+00
        h_diag = [H1,H2,H3,H4,H5,H6,H7,H8]

        H = Matrix{Float64}(I, N, N)
        for i in 1:length(h_diag)
            H[i, i] = h_diag[i]
            H[N + 1 - i, N + 1 - i] = h_diag[i]
        end       
        H *= 2*h # note the factor of 2 is to define the operator between -1 and 1 since the original operators are defined between 0 and 1
        Q = zeros(N,N)

        d = [-1/1260,5/504,-5/84,5/21,-5/6,0,5/6,-5/21,5/84,-5/504,1/1260]
        for i in 1:N
            for k = -5:5
                j = i + k
                if j >= 1 && j <= N
                    Q[i,j] = d[k+6]
                end
            end
        end

        Q0_0 = -5.0000000000000e-01
        Q0_1 =  6.7349296966214e-01
        Q0_2 = -2.5186401896559e-01
        Q0_3 =  8.3431385420901e-02
        Q0_4 =  2.5480326895984e-02
        Q0_5 = -4.5992420658252e-02
        Q0_6 =  1.7526412909003e-02
        Q0_7 = -2.0746552641799e-03
        Q0_8 =  0.0000000000000e+00
        Q0_9 =  0.0000000000000e+00
        Q0_10 =  0.0000000000000e+00
        Q0_11 =  0.0000000000000e+00
        Q0_12 =  0.0000000000000e+00
        Q1_0 = -6.7349296966214e-01
        Q1_1 =  0.0000000000000e+00
        Q1_2 =  9.1982892384044e-01
        Q1_3 = -2.7262271754043e-01
        Q1_4 = -5.0992113348238e-02
        Q1_5 =  1.1814647281129e-01
        Q1_6 = -4.6693123378079e-02
        Q1_7 =  5.8255272771571e-03
        Q1_8 =  0.0000000000000e+00
        Q1_9 =  0.0000000000000e+00
        Q1_10 =  0.0000000000000e+00
        Q1_11 =  0.0000000000000e+00
        Q1_12 =  0.0000000000000e+00
        Q2_0 =  2.5186401896559e-01
        Q2_1 = -9.1982892384044e-01
        Q2_2 =  0.0000000000000e+00
        Q2_3 =  7.8566746772741e-01
        Q2_4 = -2.4097806629929e-02
        Q2_5 = -1.5312168858669e-01
        Q2_6 =  6.9451518963875e-02
        Q2_7 = -9.9345865998262e-03
        Q2_8 =  0.0000000000000e+00
        Q2_9 =  0.0000000000000e+00
        Q2_10 =  0.0000000000000e+00
        Q2_11 =  0.0000000000000e+00
        Q2_12 =  0.0000000000000e+00
        Q3_0 = -8.3431385420901e-02
        Q3_1 =  2.7262271754043e-01
        Q3_2 = -7.8566746772741e-01
        Q3_3 =  0.0000000000000e+00
        Q3_4 =  6.2047871210535e-01
        Q3_5 =  1.4776775176509e-02
        Q3_6 = -4.6889652372990e-02
        Q3_7 =  7.3166499053672e-03
        Q3_8 =  7.9365079365079e-04
        Q3_9 =  0.0000000000000e+00
        Q3_10 =  0.0000000000000e+00
        Q3_11 =  0.0000000000000e+00
        Q3_12 =  0.0000000000000e+00
        Q4_0 = -2.5480326895984e-02
        Q4_1 =  5.0992113348238e-02
        Q4_2 =  2.4097806629929e-02
        Q4_3 = -6.2047871210535e-01
        Q4_4 =  0.0000000000000e+00
        Q4_5 =  6.9425006383507e-01
        Q4_6 = -1.5686345740485e-01
        Q4_7 =  4.2609496719925e-02
        Q4_8 = -9.9206349206349e-03
        Q4_9 =  7.9365079365079e-04
        Q4_10 =  0.0000000000000e+00
        Q4_11 =  0.0000000000000e+00
        Q4_12 =  0.0000000000000e+00
        Q5_0 =  4.5992420658252e-02
        Q5_1 = -1.1814647281129e-01
        Q5_2 =  1.5312168858669e-01
        Q5_3 = -1.4776775176509e-02
        Q5_4 = -6.9425006383507e-01
        Q5_5 =  0.0000000000000e+00
        Q5_6 =  8.0719535654891e-01
        Q5_7 = -2.2953297936781e-01
        Q5_8 =  5.9523809523809e-02
        Q5_9 = -9.9206349206349e-03
        Q5_10 =  7.9365079365079e-04
        Q5_11 =  0.0000000000000e+00
        Q5_12 =  0.0000000000000e+00
        Q6_0 = -1.7526412909003e-02
        Q6_1 =  4.6693123378079e-02
        Q6_2 = -6.9451518963875e-02
        Q6_3 =  4.6889652372990e-02
        Q6_4 =  1.5686345740485e-01
        Q6_5 = -8.0719535654891e-01
        Q6_6 =  0.0000000000000e+00
        Q6_7 =  8.3142546796428e-01
        Q6_8 = -2.3809523809524e-01
        Q6_9 =  5.9523809523809e-02
        Q6_10 = -9.9206349206349e-03
        Q6_11 =  7.9365079365079e-04
        Q6_12 =  0.0000000000000e+00
        Q7_0 =  2.0746552641799e-03
        Q7_1 = -5.8255272771571e-03
        Q7_2 =  9.9345865998262e-03
        Q7_3 = -7.3166499053672e-03
        Q7_4 = -4.2609496719925e-02
        Q7_5 =  2.2953297936781e-01
        Q7_6 = -8.3142546796428e-01
        Q7_7 =  0.0000000000000e+00
        Q7_8 =  8.3333333333333e-01
        Q7_9 = -2.3809523809524e-01
        Q7_10 =  5.9523809523809e-02
        Q7_11 = -9.9206349206349e-03
        Q7_12 =  7.9365079365079e-04

        Qmat = [Q0_0  Q0_1  Q0_2  Q0_3  Q0_4  Q0_5  Q0_6  Q0_7  Q0_8  Q0_9  Q0_10 Q0_11 Q0_12
            Q1_0  Q1_1  Q1_2  Q1_3  Q1_4  Q1_5  Q1_6  Q1_7  Q1_8  Q1_9  Q1_10 Q1_11 Q1_12
            Q2_0  Q2_1  Q2_2  Q2_3  Q2_4  Q2_5  Q2_6  Q2_7  Q2_8  Q2_9  Q2_10 Q2_11 Q2_12
            Q3_0  Q3_1  Q3_2  Q3_3  Q3_4  Q3_5  Q3_6  Q3_7  Q3_8  Q3_9  Q3_10 Q3_11 Q3_12
            Q4_0  Q4_1  Q4_2  Q4_3  Q4_4  Q4_5  Q4_6  Q4_7  Q4_8  Q4_9  Q4_10 Q4_11 Q4_12
            Q5_0  Q5_1  Q5_2  Q5_3  Q5_4  Q5_5  Q5_6  Q5_7  Q5_8  Q5_9  Q5_10 Q5_11 Q5_12
            Q6_0  Q6_1  Q6_2  Q6_3  Q6_4  Q6_5  Q6_6  Q6_7  Q6_8  Q6_9  Q6_10 Q6_11 Q6_12
            Q7_0  Q7_1  Q7_2  Q7_3  Q7_4  Q7_5  Q7_6  Q7_7  Q7_8  Q7_9  Q7_10 Q7_11 Q7_12]
        
        for i = 1:BP
            for j = 1:BP
                Q[i,j] = Qmat[i,j]
                Q[N+1-i, N+1-j] = -Qmat[i,j]
            end
        end        

    elseif p == 6
        N = 21
        BP = 10
        m = 4

        x0 =  0.0000000000000e+00
        x1 =  4.6552112904489e-01
        x2 =  1.4647984306493e+00
        x3 =  2.7620429464763e+00
        x4 =  4.0000000000000e+00
        x5 =  5.0000000000000e+00
        x6 =  6.0000000000000e+00
        x7 =  7.0000000000000e+00
        x8 =  8.0000000000000e+00
        x9 =  9.0000000000000e+00
        x10 =  1.0000000000000e+01

        xb = [x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10][1:m+1]
        h = L / (2*xb[end] + N - 1 - 2*m)
        xmid = LinRange(xb[end]+1, L/h - xb[end] - 1, N - 2*(m+1))
        x = h .* vcat(xb, collect(xmid), (L/h) .- reverse(xb))

        H1     =  1.3013597111750e-01
        H2 =  7.6146045079020e-01
        H3 =  1.1984222247012e+00
        H4 =  1.3340123109301e+00
        H5 =  1.0951811473364e+00
        H6 =  9.7569096377130e-01
        H7 =  1.0061945410831e+00
        H8 =  9.9874339446564e-01
        H9 =  1.0001702615573e+00
        H10 =  9.9998873424721e-01
        h_diag = [H1,H2,H3,H4,H5,H6,H7,H8,H9,H10]

        H = Matrix{Float64}(I, N, N)
        for i in 1:length(h_diag)
            H[i, i] = h_diag[i]
            H[N + 1 - i, N + 1 - i] = h_diag[i]
        end       
        H *= 2*h # note the factor of 2 is to define the operator between -1 and 1 since the original operators are defined between 0 and 1
        Q = zeros(N,N)

        d = [1/5544,-1/385,1/56,-5/63,15/56,-6/7,0,6/7,-15/56,5/63,-1/56,1/385,-1/5544]
        for i in 1:N
            for k = -6:6
                j = i + k
                if j >= 1 && j <= N
                    Q[i,j] = d[k+7]
                end
            end
        end        

        Q0_0 = -5.0000000000000e-01
        Q0_1 =  6.7603132599815e-01
        Q0_2 = -2.6781065957921e-01
        Q0_3 =  1.4050310470012e-01
        Q0_4 = -5.4072653004710e-02
        Q0_5 = -1.1876984028213e-02
        Q0_6 =  2.6300694680362e-02
        Q0_7 = -9.8077210531438e-03
        Q0_8 =  4.2848959311712e-04
        Q0_9 =  3.0440269352791e-04
        Q0_10 =  0.0000000000000e+00
        Q0_11 =  0.0000000000000e+00
        Q0_12 =  0.0000000000000e+00
        Q0_13 =  0.0000000000000e+00
        Q0_14 =  0.0000000000000e+00
        Q0_15 =  0.0000000000000e+00
        Q1_0 = -6.7603132599815e-01
        Q1_1 =  0.0000000000000e+00
        Q1_2 =  9.5204118058043e-01
        Q1_3 = -4.1306598236120e-01
        Q1_4 =  1.5442577883533e-01
        Q1_5 =  2.6535212157067e-02
        Q1_6 = -6.7869317213141e-02
        Q1_7 =  2.6431850942376e-02
        Q1_8 = -1.8383496124689e-03
        Q1_9 = -6.2904733024363e-04
        Q1_10 =  0.0000000000000e+00
        Q1_11 =  0.0000000000000e+00
        Q1_12 =  0.0000000000000e+00
        Q1_13 =  0.0000000000000e+00
        Q1_14 =  0.0000000000000e+00
        Q1_15 =  0.0000000000000e+00
        Q2_0 =  2.6781065957921e-01
        Q2_1 = -9.5204118058043e-01
        Q2_2 =  0.0000000000000e+00
        Q2_3 =  9.4424869445124e-01
        Q2_4 = -3.0369922793820e-01
        Q2_5 = -1.7036409572828e-02
        Q2_6 =  9.7546158402857e-02
        Q2_7 = -4.2534720340735e-02
        Q2_8 =  5.3471186513813e-03
        Q2_9 =  3.5890734751923e-04
        Q2_10 =  0.0000000000000e+00
        Q2_11 =  0.0000000000000e+00
        Q2_12 =  0.0000000000000e+00
        Q2_13 =  0.0000000000000e+00
        Q2_14 =  0.0000000000000e+00
        Q2_15 =  0.0000000000000e+00
        Q3_0 = -1.4050310470012e-01
        Q3_1 =  4.1306598236120e-01
        Q3_2 = -9.4424869445124e-01
        Q3_3 =  0.0000000000000e+00
        Q3_4 =  8.1369662782755e-01
        Q3_5 = -8.4027084126181e-02
        Q3_6 = -1.0721180825279e-01
        Q3_7 =  6.1098180874949e-02
        Q3_8 = -1.2618762739267e-02
        Q3_9 =  7.4866320589496e-04
        Q3_10 =  0.0000000000000e+00
        Q3_11 =  0.0000000000000e+00
        Q3_12 =  0.0000000000000e+00
        Q3_13 =  0.0000000000000e+00
        Q3_14 =  0.0000000000000e+00
        Q3_15 =  0.0000000000000e+00
        Q4_0 =  5.4072653004710e-02
        Q4_1 = -1.5442577883533e-01
        Q4_2 =  3.0369922793820e-01
        Q4_3 = -8.1369662782755e-01
        Q4_4 =  0.0000000000000e+00
        Q4_5 =  6.8140317057259e-01
        Q4_6 = -5.0090848997730e-02
        Q4_7 = -3.2156238350691e-02
        Q4_8 =  1.2270208460707e-02
        Q4_9 = -8.9539078453821e-04
        Q4_10 = -1.8037518037522e-04
        Q4_11 =  0.0000000000000e+00
        Q4_12 =  0.0000000000000e+00
        Q4_13 =  0.0000000000000e+00
        Q4_14 =  0.0000000000000e+00
        Q4_15 =  0.0000000000000e+00
        Q5_0 =  1.1876984028213e-02
        Q5_1 = -2.6535212157067e-02
        Q5_2 =  1.7036409572828e-02
        Q5_3 =  8.4027084126181e-02
        Q5_4 = -6.8140317057259e-01
        Q5_5 =  0.0000000000000e+00
        Q5_6 =  7.3535220394540e-01
        Q5_7 = -1.7565390898074e-01
        Q5_8 =  4.5853976429252e-02
        Q5_9 = -1.2971393808506e-02
        Q5_10 =  2.5974025974031e-03
        Q5_11 = -1.8037518037522e-04
        Q5_12 =  0.0000000000000e+00
        Q5_13 =  0.0000000000000e+00
        Q5_14 =  0.0000000000000e+00
        Q5_15 =  0.0000000000000e+00
        Q6_0 = -2.6300694680362e-02
        Q6_1 =  6.7869317213141e-02
        Q6_2 = -9.7546158402857e-02
        Q6_3 =  1.0721180825279e-01
        Q6_4 =  5.0090848997730e-02
        Q6_5 = -7.3535220394540e-01
        Q6_6 =  0.0000000000000e+00
        Q6_7 =  8.2185236816776e-01
        Q6_8 = -2.4842386107781e-01
        Q6_9 =  7.6038690915127e-02
        Q6_10 = -1.7857142857146e-02
        Q6_11 =  2.5974025974031e-03
        Q6_12 = -1.8037518037522e-04
        Q6_13 =  0.0000000000000e+00
        Q6_14 =  0.0000000000000e+00
        Q6_15 =  0.0000000000000e+00
        Q7_0 =  9.8077210531438e-03
        Q7_1 = -2.6431850942376e-02
        Q7_2 =  4.2534720340735e-02
        Q7_3 = -6.1098180874949e-02
        Q7_4 =  3.2156238350691e-02
        Q7_5 =  1.7565390898074e-01
        Q7_6 = -8.2185236816776e-01
        Q7_7 =  0.0000000000000e+00
        Q7_8 =  8.5207110387533e-01
        Q7_9 = -2.6676625654053e-01
        Q7_10 =  7.9365079365093e-02
        Q7_11 = -1.7857142857146e-02
        Q7_12 =  2.5974025974031e-03
        Q7_13 = -1.8037518037522e-04
        Q7_14 =  0.0000000000000e+00
        Q7_15 =  0.0000000000000e+00
        Q8_0 = -4.2848959311712e-04
        Q8_1 =  1.8383496124689e-03
        Q8_2 = -5.3471186513813e-03
        Q8_3 =  1.2618762739267e-02
        Q8_4 = -1.2270208460707e-02
        Q8_5 = -4.5853976429252e-02
        Q8_6 =  2.4842386107781e-01
        Q8_7 = -8.5207110387533e-01
        Q8_8 =  0.0000000000000e+00
        Q8_9 =  8.5702210251244e-01
        Q8_10 = -2.6785714285718e-01
        Q8_11 =  7.9365079365093e-02
        Q8_12 = -1.7857142857146e-02
        Q8_13 =  2.5974025974031e-03
        Q8_14 = -1.8037518037522e-04
        Q8_15 =  0.0000000000000e+00
        Q9_0 = -3.0440269352791e-04
        Q9_1 =  6.2904733024363e-04
        Q9_2 = -3.5890734751923e-04
        Q9_3 = -7.4866320589496e-04
        Q9_4 =  8.9539078453821e-04
        Q9_5 =  1.2971393808506e-02
        Q9_6 = -7.6038690915127e-02
        Q9_7 =  2.6676625654053e-01
        Q9_8 = -8.5702210251244e-01
        Q9_9 =  0.0000000000000e+00
        Q9_10 =  8.5714285714289e-01
        Q9_11 = -2.6785714285718e-01
        Q9_12 =  7.9365079365093e-02
        Q9_13 = -1.7857142857146e-02
        Q9_14 =  2.5974025974031e-03
        Q9_15 = -1.8037518037522e-04

        Qmat = [
            Q0_0  Q0_1  Q0_2  Q0_3  Q0_4  Q0_5  Q0_6  Q0_7  Q0_8  Q0_9  Q0_10 Q0_11 Q0_12 Q0_13 Q0_14 Q0_15;
            Q1_0  Q1_1  Q1_2  Q1_3  Q1_4  Q1_5  Q1_6  Q1_7  Q1_8  Q1_9  Q1_10 Q1_11 Q1_12 Q1_13 Q1_14 Q1_15;
            Q2_0  Q2_1  Q2_2  Q2_3  Q2_4  Q2_5  Q2_6  Q2_7  Q2_8  Q2_9  Q2_10 Q2_11 Q2_12 Q2_13 Q2_14 Q2_15;
            Q3_0  Q3_1  Q3_2  Q3_3  Q3_4  Q3_5  Q3_6  Q3_7  Q3_8  Q3_9  Q3_10 Q3_11 Q3_12 Q3_13 Q3_14 Q3_15;
            Q4_0  Q4_1  Q4_2  Q4_3  Q4_4  Q4_5  Q4_6  Q4_7  Q4_8  Q4_9  Q4_10 Q4_11 Q4_12 Q4_13 Q4_14 Q4_15;
            Q5_0  Q5_1  Q5_2  Q5_3  Q5_4  Q5_5  Q5_6  Q5_7  Q5_8  Q5_9  Q5_10 Q5_11 Q5_12 Q5_13 Q5_14 Q5_15;
            Q6_0  Q6_1  Q6_2  Q6_3  Q6_4  Q6_5  Q6_6  Q6_7  Q6_8  Q6_9  Q6_10 Q6_11 Q6_12 Q6_13 Q6_14 Q6_15;
            Q7_0  Q7_1  Q7_2  Q7_3  Q7_4  Q7_5  Q7_6  Q7_7  Q7_8  Q7_9  Q7_10 Q7_11 Q7_12 Q7_13 Q7_14 Q7_15;
            Q8_0  Q8_1  Q8_2  Q8_3  Q8_4  Q8_5  Q8_6  Q8_7  Q8_8  Q8_9  Q8_10 Q8_11 Q8_12 Q8_13 Q8_14 Q8_15;
            Q9_0  Q9_1  Q9_2  Q9_3  Q9_4  Q9_5  Q9_6  Q9_7  Q9_8  Q9_9  Q9_10 Q9_11 Q9_12 Q9_13 Q9_14 Q9_15
        ]
        for i = 1:BP
            for j = 1:BP
                Q[i,j] = Qmat[i,j]
                Q[N+1-i, N+1-j] = -Qmat[i,j]
            end
        end              
    else
        error("P=2,3,4,5,or 6 only")
    end
    # map nodes between -1 and 1
    for i = 1:N
        x[i] = 2*x[i]-1;
    end

    # differentiation matrix
    D = H \ Q

    return D, Q, H, x

end

# D, Q, H, x = get_1d_minimal(6)
# println(Q+Q')
# println(H*D+(H*D)')
# println(D*x)
# println(D*x.^12-12*x.^11)